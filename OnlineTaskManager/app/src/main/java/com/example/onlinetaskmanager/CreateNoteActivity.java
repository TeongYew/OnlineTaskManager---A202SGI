package com.example.onlinetaskmanager;

import static android.content.ContentValues.TAG;

import androidx.annotation.NonNull;
import androidx.appcompat.app.AppCompatActivity;

import android.app.AlertDialog;
import android.app.DatePickerDialog;
import android.app.TimePickerDialog;
import android.content.Intent;
import android.os.Bundle;
import android.os.Handler;
import android.os.TestLooperManager;
import android.provider.CalendarContract;
import android.util.Log;
import android.view.View;
import android.widget.DatePicker;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.TextView;
import android.widget.TimePicker;
import android.widget.Toast;

import com.google.android.gms.tasks.OnCompleteListener;
import com.google.android.gms.tasks.OnFailureListener;
import com.google.android.gms.tasks.OnSuccessListener;
import com.google.android.gms.tasks.Task;
import com.google.android.material.floatingactionbutton.FloatingActionButton;
import com.google.firebase.firestore.DocumentReference;
import com.google.firebase.firestore.DocumentSnapshot;
import com.google.firebase.firestore.FirebaseFirestore;
import com.google.firebase.firestore.QueryDocumentSnapshot;
import com.google.firebase.firestore.QuerySnapshot;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.Locale;
import java.util.Map;


public class CreateNoteActivity extends AppCompatActivity implements DatePickerDialog.OnDateSetListener{

    FirebaseFirestore db = FirebaseFirestore.getInstance();
    String dummyuserID = "1111"; //dummy user id <--- Need to replace with get instance get current userid.
    String testnoteID = "0002"; //dummy note id <--- Need to be autogenerated
    private EditText EntryTitle, EntryContent;
    private TextView EntryDateTime, DateButtonText, TimeButton;
    int hour, minute;
    private ImageView backBtn;
    String testNoteID2 = "3HnEyb2W1Ain6KiewNik";
    String testUserId2 = "1112";
    FloatingActionButton calendarFAB;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_create_note);

        Calendar dueDateTime = Calendar.getInstance();
        EntryTitle = findViewById(R.id.EntryTitle);
        EntryContent = findViewById(R.id.EntryContent);
        //EntryDateTime = findViewById(R.id.EntryDateTime);
        DateButtonText = findViewById(R.id.DateButton);
        TimeButton = findViewById(R.id.TimeButton);
        backBtn = findViewById(R.id.backButton);
        calendarFAB = findViewById(R.id.calendarFAB);

        //Displaying current date and time of note creation.
//        EntryDateTime.setText(
//                new SimpleDateFormat("EEEE, dd MMMM yyyy HH:mm a", Locale.getDefault())
//                        .format(new Date())
//        );

        //getNoteWithNoteId();
        getAllNotesWithUserId();

        //Button back to main menu. (need to add confirmation as well, "unsaved noted will be deleted")
        ImageView BackButtonMain = findViewById(R.id.backButton);
        BackButtonMain.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                Intent intent = new Intent(view.getContext(), MainActivity.class);
                view.getContext().startActivity(intent);}
        });

        //Button to set deadline date
        TextView DateButtonMain = findViewById(R.id.DateButton);
        DateButtonMain.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                DatePickerDialog.OnDateSetListener onDateSetListener = new DatePickerDialog.OnDateSetListener() {
                    @Override
                    public void onDateSet(DatePicker datePicker, int year, int month, int day) {

                        String date = year + "/" + month + "/" + day;
                        DateButtonMain.setText(date);

                        dueDateTime.set(Calendar.YEAR, year);
                        dueDateTime.set(Calendar.MONTH, month);
                        dueDateTime.set(Calendar.DAY_OF_MONTH, day);
                    }
                };
                DatePickerDialog datePickerDialog = new DatePickerDialog(
                        CreateNoteActivity.this,
                        onDateSetListener,
                        Calendar.getInstance().get(Calendar.YEAR),
                        Calendar.getInstance().get(Calendar.MONTH),
                        Calendar.getInstance().get(Calendar.DAY_OF_MONTH)
                );
                datePickerDialog.show();
            }
        });

        //Button to set deadline time
        TextView TimeButtonMain = findViewById(R.id.TimeButton);
        TimeButtonMain.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                TimePickerDialog.OnTimeSetListener onTimeSetListener = new TimePickerDialog.OnTimeSetListener() {
                    @Override
                    public void onTimeSet(TimePicker timePicker, int selectedHour, int selectedMinute) {
                        String time = selectedHour + ":" + selectedMinute;
                        TimeButtonMain.setText(time);

                        dueDateTime.set(Calendar.HOUR_OF_DAY, selectedHour);
                        dueDateTime.set(Calendar.MINUTE, selectedMinute);
                        dueDateTime.set(Calendar.SECOND, 0);
                    }
                };
                TimePickerDialog timePickerDialog = new TimePickerDialog(CreateNoteActivity.this, onTimeSetListener,hour,minute,true);

                timePickerDialog.setTitle("Select Deadline Time");
                timePickerDialog.show();
            }
        });



        ImageView AddNoteButton = findViewById(R.id.saveButton);
        AddNoteButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                validateNote();
                saveNote();
                setReminder(dueDateTime);
                Intent intent = new Intent(view.getContext(), MainActivity.class);
                view.getContext().startActivity(intent);
            }
        });

        //set listener for the button to go back to main menu
        backBtn.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                //go back to main menu
                Intent intent = new Intent(CreateNoteActivity.this, MainActivity.class);
                startActivity(intent);
            }
        });

        calendarFAB.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                setCalendar();
            }
        });


    }

    //Date picker for deadline date.
    private void showDatePicker() {
        DatePickerDialog datePickerDialog = new DatePickerDialog(
                this,
                this,
                Calendar.getInstance().get(Calendar.YEAR),
                Calendar.getInstance().get(Calendar.MONTH),
                Calendar.getInstance().get(Calendar.DAY_OF_MONTH)
        );
        datePickerDialog.show();
    }

    //Time picker for deadline time.
    public void popTimePicker(){
        TimePickerDialog.OnTimeSetListener onTimeSetListener = new TimePickerDialog.OnTimeSetListener() {
            @Override
            public void onTimeSet(TimePicker timePicker, int selectedHour, int selectedMinute) {
                String time = selectedHour + ":" + selectedMinute;
                TimeButton.setText(time);
            }
        };
        TimePickerDialog timePickerDialog = new TimePickerDialog(this, onTimeSetListener,hour,minute,true);

        timePickerDialog.setTitle("Select Deadline Time");
        timePickerDialog.show();
    }

    //Convert

    //Validate that note title and note content are filled.
    private void validateNote() {
        if (EntryTitle.getText().toString().trim().isEmpty()) {
            Toast.makeText(CreateNoteActivity.this, R.string.TitleEmpty, Toast.LENGTH_SHORT).show();
        }else if(EntryContent.getText().toString().trim().isEmpty()){
            Toast.makeText(CreateNoteActivity.this, R.string.ContentEmpty, Toast.LENGTH_SHORT).show();
        }
    }
    String realNoteId;
    //Add note to hashmap to upload to firestore. link to user id and insert into user_note collection.
    public void saveNote() {
        Map<String, Object> note = new HashMap<>();
        note.put("note_content", EntryContent.getText().toString());
        note.put("note_title", EntryTitle.getText().toString());
        note.put("note_id", testnoteID);

        db.collection("notes")
                .add(note)
                .addOnSuccessListener(new OnSuccessListener<DocumentReference>() {
                    @Override
                    public void onSuccess(DocumentReference documentReference) {
                        Log.d(TAG, "DocumentSnapshot added with ID: " + documentReference.getId());
                        Toast.makeText(CreateNoteActivity.this, R.string.CreationSuccess, Toast.LENGTH_SHORT).show();
                        realNoteId = documentReference.getId();

                        Log.d(TAG, "saveNote: got to the update:" + realNoteId);
                        db.collection("notes")
                                .document(realNoteId)
                                .update("note_id", realNoteId)
                                .addOnSuccessListener(new OnSuccessListener<Void>() {
                                    @Override
                                    public void onSuccess(Void aVoid) {
                                        Log.d(TAG, "DocumentSnapshot successfully updated!");

                                        Map<String, Object> notes_users = new HashMap<>();
                                        notes_users.put("notes_id", realNoteId); //generate user ID then add here to add to firestore.
                                        notes_users.put("user_id", dummyuserID); //find a way to pull user id for now can use dummy for testing.

                                        db.collection("notes_users")
                                                .add(notes_users)
                                                .addOnSuccessListener(new OnSuccessListener<DocumentReference>() {
                                                    @Override
                                                    public void onSuccess(DocumentReference documentReference) {
                                                        Log.d(TAG, "DocumentSnapshot added with ID: " + documentReference.getId());
                                                    }
                                                })
                                                .addOnFailureListener(new OnFailureListener() {
                                                    @Override
                                                    public void onFailure(@NonNull Exception e) {
                                                        Log.w(TAG, "Error adding notes_users document", e);
                                                    }
                                                });

                                    }
                                })
                                .addOnFailureListener(new OnFailureListener() {
                                    @Override
                                    public void onFailure(@NonNull Exception e) {
                                        Log.w(TAG, "Error updating note_id document", e);
                                    }
                                });

                    }
                })
                .addOnFailureListener(new OnFailureListener() {
                    @Override
                    public void onFailure(@NonNull Exception e) {
                        Log.w(TAG, "Error adding notes document", e);
                    }
                });

    }

    @Override
    public void onDateSet(DatePicker datePicker, int i, int month, int i2) {
        month =  month + 1;
        String date = i2 + "/" + month + "/" + i;
        DateButtonText.setText(date);
    }

    private void getNoteWithNoteId(){

        db.collection("notes").document(testNoteID2)
                .get().addOnCompleteListener(new OnCompleteListener<DocumentSnapshot>() {
            @Override
            public void onComplete(@NonNull Task<DocumentSnapshot> task) {
                if (task.isSuccessful()) {
                    DocumentSnapshot document = task.getResult();
                    if (document.exists()) {
                        Log.d(TAG, "DocumentSnapshot data: " + document.getData());
                        Log.d(TAG, "DocumentSnapshot data2: " + document.get("note_title"));
                        EntryTitle.setText(document.get("note_title").toString());
                        EntryContent.setText(document.get("note_content").toString());

                    } else {
                        Log.d(TAG, "No such document");
                    }
                } else {
                    Log.d(TAG, "get failed with ", task.getException());
                }
            }
        });

    }

    private void getAllNotesWithUserId(){
        db.collection("notes_users")
                .whereEqualTo("user_id", testUserId2)
                .get()
                .addOnCompleteListener(new OnCompleteListener<QuerySnapshot>() {
                    @Override
                    public void onComplete(@NonNull Task<QuerySnapshot> task) {
                        if (task.isSuccessful()) {

                            ArrayList<String> notesIdList = new ArrayList<String>();

                            for (QueryDocumentSnapshot document : task.getResult()) {
                                Log.d(TAG, document.getId() + " => " + document.getData());
                                Log.d(TAG, document.getId() + " => " + document.get("notes_id"));
                                notesIdList.add(document.get("notes_id").toString());
                            }

                            //loop through the arraylist that is holding all the notes_id of the user and get each note
                            for(int i=0; i<notesIdList.size(); i++) {

                                Log.d(TAG, "onComplete: " + i + notesIdList.get(i));

                                db.collection("notes")
                                        .whereEqualTo("note_id", notesIdList.get(i))
                                        .get()
                                        .addOnCompleteListener(new OnCompleteListener<QuerySnapshot>() {
                                            @Override
                                            public void onComplete(@NonNull Task<QuerySnapshot> task) {
                                                if (task.isSuccessful()) {
                                                    for (QueryDocumentSnapshot document : task.getResult()) {
                                                        Log.d(TAG, document.getId() + " => " + document.getData());
                                                        Log.d(TAG, document.getId() + " => " + document.get("note_title"));
                                                        Log.d(TAG, document.getId() + " => " + document.get("note_content"));
                                                    }

                                                } else {
                                                    Log.d(TAG, "Error getting documents: ", task.getException());
                                                }
                                            }
                                        });

                            }


                        } else {
                            Log.d(TAG, "Error getting documents: ", task.getException());
                        }
                    }
                });
    }

    private void setReminder(Calendar c){

        Log.d(TAG, "setReminder: got here");
        Log.d(TAG, "startAlarm: " + c.get(Calendar.YEAR) + c.get(Calendar.MONTH) + c.get(Calendar.DAY_OF_MONTH) + c.get(Calendar.HOUR)+ c.get(Calendar.MINUTE));

    }

    private void setCalendar(){
        if(!EntryTitle.getText().toString().isEmpty()){

            Intent intent = new Intent(Intent.ACTION_INSERT);
            intent.setData(CalendarContract.Events.CONTENT_URI);
            intent.putExtra(CalendarContract.Events.TITLE, EntryTitle.getText().toString());

            //extra features to include
            intent.putExtra(CalendarContract.Events.ALL_DAY, true);
            //intent.putExtra(CalendarContract.Events.LAST_DATE, true);

            try{
                startActivity(intent);
            }catch(Exception e){
                Toast.makeText(this, "There is no app that can support this action", Toast.LENGTH_SHORT).show();
                Log.d(TAG, e.toString());
            }

        }
        else{
            Toast.makeText(this, "Please make sure all the fields are filled in", Toast.LENGTH_SHORT).show();
        }
    }

}